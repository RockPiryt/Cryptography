Go was created at Google in 2007, and since then, engineering teams across Google have adopted Go to build products and services at massive scale.

Allegro – Writing a very fast cache service with millions of entries in Go
“Finally, we sped up our application from more than 2.5 seconds to less than 250 milliseconds for the longest request.”

Armut
How Armut Labs use Go
Learn about how Armut Labs reduced resource consumption and API response time after moving from C# and .net core to Go.

Massive practice in Go at ByteDance
Go was introduced to ByteDance in 2014, and since then engineering teams across ByteDance have adopted Go to build products and services on a massive scale. As we went deeper, relatively mature microservice best practices under Go were developed and summarized, which then were open-sourced and named CloudWeGo since 2021. Now 70% of microservices within ByteDance are written by Go.

Capital One - A Serverless and Go Journey
At the time, no single team member knew Go, but within a month, everyone was writing in Go and we were building out the endpoints. It was the flexibility, how easy it was to use, and the really cool concept behind Go (how Go handles native concurrency, garbage collection, and of course safety+speed.) that helped engage us during the build. Also, who can beat that cute mascot!

Graceful upgrades in Go
Cloudflare speeds up and protects millions of websites, APIs, SaaS services, and other properties connected to the Internet. “Go is at the heart of CloudFlare’s services including handling compression for high-latency HTTP connections, our entire DNS infrastructure, SSL, load testing and more.”

Dropbox - Open sourcing our Go libraries
About a year ago, we decided to migrate our performance-critical backends from Python to Go to leverage better concurrency support and faster execution speed. ... At this point, we have successfully moved major parts of our infrastructure to Go.

Bigslice - A cluster computing system in Go
At GRAIL, we use the Go programming language for most of our bioinformatics, data processing, and machine learning tasks. Go’s simplicity makes it easy for newcomers to learn; its transparent runtime semantics makes it easy to reason about performance; and its ability to control data layout and allocation makes it possible to write highly performant data processing code.

X - 5 billion sessions a day in realtime
We now see about five billion sessions per day, and growing. Hundreds of millions of devices send millions of events every second to the Answers endpoint. During the time that it took you to read to here, the Answers back-end will have received and processed about 10,000,000 analytics events.

Netflix - Application data caching using SSDs
The decision to use Go was deliberate, because we needed something that had lower latency than Java (where garbage collection pauses are an issue) and is more productive for developers than C, while also handling tens of thousands of client connections. Go fits this space well.

Source: https://go.dev/solutions/case-studies